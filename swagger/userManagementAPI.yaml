openapi: 3.0.0
info:
  title: User Management API
  description: RESTful APIs for handling user management flow
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account and sends a verification email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input or user already exists

  /auth/verify-email:
    post:
      summary: Verify user email
      description: Verifies a user's email using a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: abc123verifyToken
      responses:
        200:
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
        400:
          description: Invalid or expired token

  /auth/login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Invalid credentials

  /auth/forgot-password:
    post:
      summary: Request password reset
      description: Sends a password reset link to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        200:
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent
        404:
          description: User not found

  /auth/reset-password:
    post:
      summary: Reset password
      description: Resets the user's password using the reset token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successful
        400:
          description: Invalid or expired reset token

  /users/profile:
    get:
      summary: Get user profile
      description: Retrieves the profile of the logged-in user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized

    put:
      summary: Update user profile
      description: Updates the profile details of the logged-in user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid input
        401:
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123
        role:
          type: string
          enum: [student, teacher]
          example: student

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    ResetPasswordRequest:
      type: object
      properties:
        resetToken:
          type: string
          example: abc123resetToken
        newPassword:
          type: string
          example: newPassword123

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        password:
          type: string
          example: newPassword123

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: user@example.com
        name:
          type: string
          example: John Doe
        role:
          type: string
          example: student
        is_email_verified:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-05-17T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-05-17T10:00:00Z"